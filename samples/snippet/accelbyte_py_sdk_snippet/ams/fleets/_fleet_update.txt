import json
import yaml

from .._utils import to_dict
from accelbyte_py_sdk.api.ams import fleet_update
from accelbyte_py_sdk.api.ams.models import ApiFleetParameters
from accelbyte_py_sdk.api.ams.models import ResponseErrorResponse

// body:
// Definition: ApiFleetParameters
// active: bool
// claim_keys: List[str]
// ds_host_configuration: ApiDSHostConfiguration
// Definition: ApiDSHostConfiguration
    // instance_id: str
    // instance_type: str
    // servers_per_vm: int
// image_deployment_profile: ApiImageDeploymentProfile
// Definition: ApiImageDeploymentProfile
    // command_line: str
    // image_id: str
    // port_configurations: List[ApiPortConfiguration]
    // Definition: List[ApiPortConfiguration]
        // name: str
        // protocol: str
    // timeout: ApiTimeout
    // Definition: ApiTimeout
        // creation: int
        // drain: int
        // session: int
        // unresponsive: int
// name: str
// regions: List[ApiRegionConfig]
// Definition: List[ApiRegionConfig]
    // buffer_size: int
    // max_server_count: int
    // min_server_count: int
    // region: str

// Example: '{"active": false, "claimKeys": ["pYGZ9gv1YlhpNpYb", "w5EVxHyEwhCaB6GH", "96YtwBz7mZkgNk5Q"], "dsHostConfiguration": {"instanceId": "DTUf7B6e8UXSkb04", "instanceType": "Mxtxso9kKM5TVg3U", "serversPerVm": 96}, "imageDeploymentProfile": {"commandLine": "EI6t2RIy3HWboF3T", "imageId": "gJywK1s03KqV4AIb", "portConfigurations": [{"name": "kVaOzZGv9Y7CYuBq", "protocol": "k6NcRjk5dZQzpji2"}, {"name": "Bay56z7p4LbQRKC6", "protocol": "N7lHfqXT9a9qzVkK"}, {"name": "6JEUopUhghNgRVTe", "protocol": "nCyjwFbqIw6aceJa"}], "timeout": {"creation": 24, "drain": 9, "session": 36, "unresponsive": 61}}, "name": "JM2T16P7VC26zmzK", "regions": [{"bufferSize": 93, "maxServerCount": 86, "minServerCount": 52, "region": "qjUSpgP2SSeSXjCy"}, {"bufferSize": 55, "maxServerCount": 46, "minServerCount": 55, "region": "JFUY75CAxbgzMr3U"}, {"bufferSize": 42, "maxServerCount": 78, "minServerCount": 73, "region": "hx3fPEPZynKuB9ex"}]}'

result, error = fleet_update(
    body=body,
    fleet_id=fleet_id,
    namespace=namespace,
    x_additional_headers=x_additional_headers,
)